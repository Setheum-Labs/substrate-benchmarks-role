---
# Setup the system. Upgrade and install required software
- name: Run the equivalent of "apt-get update"
  when: ansible_os_family == "Debian"
  become: true
  apt:
    update_cache: yes

- name: Upgrade all packages to the latest version
  when: ansible_os_family == "Debian"
  become: true
  apt:
    name: "*"
    state: latest

- name: install required software (Debian)
  when: ansible_os_family == "Debian"
  become: true
  apt:
    pkg:
      - util-linux
      - lsb-core
    state: latest
    update_cache: true

- name: install required software (RedHat)
  when: ansible_os_family == "RedHat"
  become: true
  yum:
    name:
      - util-linux
      - redhat-lsb-core
    state: latest
    update_cache: true

# Prepare benchmarking tool
- name: create working directory for benchmarking tool
  file:
    path: '{{ansible_env.HOME}}/results'
    state: directory

- name: download benchmarking tool
  get_url:
    url: '{{benchmarking_binary_url}}'
    dest: '{{ansible_env.HOME}}/bench-tool'
    mode: 'u+x'

- name: check benchmarking tool availability
  shell: |
    {{ansible_env.HOME}}/bench-tool benchmark --version

# Collect information about the machine
- name: collect date
  shell: date
  register: info_date

- name: collect release info
  shell: lsb_release --all
  register: info_release

- name: collect CPU info
  shell: lscpu
  register: info_cpu

- name: collect memory info
  shell: free -h
  register: info_memory

- name: write collected info to file
  template:
    src: files/DEVICE_INFO.j2
    dest: '{{ansible_env.HOME}}/results/DEVICE_INFO.md'

# Run benchmarks depending on specified scope
- name: run all benchmarks
  import_tasks: benchmark_all.yml
  when: scope == "all"

- name: run limited (balances & staking) benchmarks
  import_tasks: benchmark_limited.yml
  when: scope == "limited"

# Collect the results
- name: create local directory for results
  file:
    path: 'results'
    state: directory
  delegate_to: localhost

- name: pull results from remote and save those locally in `results/`
  synchronize:
    mode: pull
    src: '{{ansible_env.HOME}}/results/'
    dest: 'results/host_{{ansible_host}}/'
